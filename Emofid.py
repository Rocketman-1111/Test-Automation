
  # Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class TestUntitled():
  def setup_method(self, method):
    self.driver = webdriver.Chrome()
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def test_untitled(self):
    # Test name: Untitled
    # Step # | name | target | value
    # 1 | open | https://www.emofid.com/jobs/ | 
    self.driver.get("https://www.emofid.com/jobs/")
    # 2 | setWindowSize | 1382x744 | 
    self.driver.set_window_size(1382, 744)
    # 3 | mouseOver | linkText=فرصت‌های همکاری | 
    element = self.driver.find_element(By.LINK_TEXT, "فرصت‌های همکاری")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    # 4 | click | linkText=فرصت‌های همکاری | 
    self.driver.find_element(By.LINK_TEXT, "فرصت‌های همکاری").click()
    # 5 | mouseOut | linkText=فرصت‌های همکاری | 
    element = self.driver.find_element(By.CSS_SELECTOR, "body")
    actions = ActionChains(self.driver)
    actions.move_to_element(element, 0, 0).perform()
    # 6 | click | css=.col-span-12:nth-child(5) > .px-5 > .text-base | 
    self.driver.find_element(By.CSS_SELECTOR, ".col-span-12:nth-child(5) > .px-5 > .text-base").click()
    # 7 | runScript | window.scrollTo(0,375) | 
    self.driver.execute_script("window.scrollTo(0,375)")
    # 8 | runScript | window.scrollTo(0,1767) | 
    self.driver.execute_script("window.scrollTo(0,1767)")
    # 9 | click | linkText=درخواست همکاری | 
    self.driver.find_element(By.LINK_TEXT, "درخواست همکاری").click()
    # 10 | runScript | window.scrollTo(0,2219) | 
    self.driver.execute_script("window.scrollTo(0,2219)")
    # 11 | runScript | window.scrollTo(0,9) | 
    self.driver.execute_script("window.scrollTo(0,9)")
    # 12 | click | id=firstName | 
    self.driver.find_element(By.ID, "firstName").click()
    # 13 | type | id=firstName | نام
    self.driver.find_element(By.ID, "firstName").send_keys("نام")
    # 14 | type | id=lastName | نام
    self.driver.find_element(By.ID, "lastName").send_keys("نام")
    # 15 | click | css=.ml-8:nth-child(2) > label | 
    self.driver.find_element(By.CSS_SELECTOR, ".ml-8:nth-child(2) > label").click()
    # 16 | click | css=.input-picker--input | 
    self.driver.find_element(By.CSS_SELECTOR, ".input-picker--input").click()
    # 17 | click | css=.daysList-day:nth-child(13) | 
    self.driver.find_element(By.CSS_SELECTOR, ".daysList-day:nth-child(13)").click()
    # 18 | click | css=.absolute > path:nth-child(2) | 
    self.driver.find_element(By.CSS_SELECTOR, ".absolute > path:nth-child(2)").click()
    # 19 | click | name=militaryServiceStatus | 
    self.driver.find_element(By.NAME, "militaryServiceStatus").click()
    # 20 | select | name=militaryServiceStatus | label=معافیت تحصیلی
    dropdown = self.driver.find_element(By.NAME, "militaryServiceStatus")
    dropdown.find_element(By.XPATH, "//option[. = 'معافیت تحصیلی']").click()
    # 21 | click | css=.react-select__input-container | 
    self.driver.find_element(By.CSS_SELECTOR, ".react-select__input-container").click()
    # 22 | click | id=react-select-4-option-2 | 
    self.driver.find_element(By.ID, "react-select-4-option-2").click()
    # 23 | click | id=mobile | 
    self.driver.find_element(By.ID, "mobile").click()
    # 24 | type | id=mobile | 09121212111
    self.driver.find_element(By.ID, "mobile").send_keys("09121212111")
    # 25 | click | id=email | 
    self.driver.find_element(By.ID, "email").click()
    # 26 | type | id=email | test5@gmail.com
    self.driver.find_element(By.ID, "email").send_keys("test5@gmail.com")
    # 27 | click | css=.md\3Aw-auto | 
    self.driver.find_element(By.CSS_SELECTOR, ".md\\3Aw-auto").click()
    # 28 | type | id=uploadingFile | C:\fakepath\دستور جلسه CRM(1).pdf
    self.driver.find_element(By.ID, "uploadingFile").send_keys("C:\\fakepath\\دستور جلسه CRM(1).pdf")
    # 29 | click | css=.col-span-2 > .flex | 
    self.driver.find_element(By.CSS_SELECTOR, ".col-span-2 > .flex").click()
    # 30 | verifyElementPresent | css=.mb-1 | درخواست همکاری شما با موفقیت ارسال شد.
    elements = self.driver.find_elements(By.CSS_SELECTOR, ".mb-1")
    assert len(elements) > 0
  

----------------------------------------------------------------------------------------------------------------
# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class TestEmofidnavigationslidernewsonthehomepage():
  def setup_method(self, method):
    self.driver = webdriver.Chrome()
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def test_emofidnavigationslidernewsonthehomepage(self):
    # Test name: emofid navigation,slider & news on the home page
    # Step # | name | target | value
    # 1 | open | https://www.emofid.com/ | 
    self.driver.get("https://www.emofid.com/")
    # 2 | verifyElementPresent | css=.wrapper > .w-full > .relative:nth-child(1) | 
    elements = self.driver.find_elements(By.CSS_SELECTOR, ".wrapper > .w-full > .relative:nth-child(1)")
    assert len(elements) > 0
    # 3 | verifyElementPresent | css=.pb-5 | آخرین خبرها
    elements = self.driver.find_elements(By.CSS_SELECTOR, ".pb-5")
    assert len(elements) > 0
    # 4 | verifyText | css=.pb-5 | آخرین خبرها
    assert self.driver.find_element(By.CSS_SELECTOR, ".pb-5").text == "آخرین خبرها"
    # 5 | verifyElementPresent | linkText=مشاهده همه خبرها | 
    elements = self.driver.find_elements(By.LINK_TEXT, "مشاهده همه خبرها")
    assert len(elements) > 0
    # 6 | verifyText | linkText=مشاهده همه خبرها | مشاهده همه خبرها
    assert self.driver.find_element(By.LINK_TEXT, "مشاهده همه خبرها").text == "مشاهده همه خبرها"
  
----------------------------------------------------------------------------------------------------------
# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class TestUntitled():
  def setup_method(self, method):
    self.driver = webdriver.Chrome()
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def test_untitled(self):
    # Test name: Untitled
    # Step # | name | target | value
    # 1 | open | https://www.emofid.com/ | 
    self.driver.get("https://www.emofid.com/")
    # 2 | setWindowSize | 1382x744 | 
    self.driver.set_window_size(1382, 744)
    # 3 | click | linkText=مشاوره رایگان سرمایه‌گذاری | 
    self.driver.find_element(By.LINK_TEXT, "مشاوره رایگان سرمایه‌گذاری").click()
    # 4 | mouseOver | linkText=مشاوره رایگان سرمایه‌گذاری | 
    element = self.driver.find_element(By.LINK_TEXT, "مشاوره رایگان سرمایه‌گذاری")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    # 5 | runScript | window.scrollTo(0,38) | 
    self.driver.execute_script("window.scrollTo(0,38)")
    # 6 | runScript | window.scrollTo(0,11) | 
    self.driver.execute_script("window.scrollTo(0,11)")
    # 7 | click | id=mobile | 
    self.driver.find_element(By.ID, "mobile").click()
    # 8 | type | id=mobile | 09121212112
    self.driver.find_element(By.ID, "mobile").send_keys("09121212112")
    # 9 | selectFrame | index=4 | 
    self.driver.switch_to.frame(4)
    # 10 | click | id=label | 
    self.driver.find_element(By.ID, "label").click()
    # 11 | selectFrame | relative=parent | 
    self.driver.switch_to.default_content()
    # 12 | selectFrame | index=3 | 
    self.driver.switch_to.frame(3)
    # 13 | click | css=canvas | 
    self.driver.find_element(By.CSS_SELECTOR, "canvas").click()
    # 14 | click | css=.button-submit | 
    self.driver.find_element(By.CSS_SELECTOR, ".button-submit").click()
    # 15 | click | css=canvas | 
    self.driver.find_element(By.CSS_SELECTOR, "canvas").click()
    # 16 | click | css=.button-submit | 
    self.driver.find_element(By.CSS_SELECTOR, ".button-submit").click()
    # 17 | selectFrame | relative=parent | 
    self.driver.switch_to.default_content()
    # 18 | click | css=.text-white:nth-child(3) | 
    self.driver.find_element(By.CSS_SELECTOR, ".text-white:nth-child(3)").click()
    # 19 | verifyElementPresent | css=.Toastify__toast-body > div:nth-child(2) | 
    elements = self.driver.find_elements(By.CSS_SELECTOR, ".Toastify__toast-body > div:nth-child(2)")
    assert len(elements) > 0
  
------------------------------------------------------------------------------------------------------
# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class TestStockcode():
  def setup_method(self, method):
    self.driver = webdriver.Chrome()
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def test_stockcode(self):
    # Test name: stock code
    # Step # | name | target | value
    # 1 | open | / | 
    self.driver.get("https://www.emofid.com/")
    # 2 | setWindowSize | 1936x1056 | 
    self.driver.set_window_size(1936, 1056)
    # 3 | runScript | window.scrollTo(0,346) | 
    self.driver.execute_script("window.scrollTo(0,346)")
    # 4 | verifyElementPresent | linkText=دریافت کد بورسی | 
    elements = self.driver.find_elements(By.LINK_TEXT, "دریافت کد بورسی")
    assert len(elements) > 0
    # 5 | verifyElementPresent | css=.max-w-\[1320px\] > .flex > .flex > .flex > .flex:nth-child(2) | 
    elements = self.driver.find_elements(By.CSS_SELECTOR, ".max-w-\\[1320px\\] > .flex > .flex > .flex > .flex:nth-child(2)")
    assert len(elements) > 0
    # 6 | verifyElementPresent | css=.mt-10 | 
    elements = self.driver.find_elements(By.CSS_SELECTOR, ".mt-10")
    assert len(elements) > 0
    # 7 | click | linkText=دریافت کد بورسی | 
    self.driver.find_element(By.LINK_TEXT, "دریافت کد بورسی").click()
    # 8 | verifyElementPresent | id=Mobile | 
    elements = self.driver.find_elements(By.ID, "Mobile")
    assert len(elements) > 0
    # 9 | verifyElementPresent | css=.header | 
    elements = self.driver.find_elements(By.CSS_SELECTOR, ".header")
    assert len(elements) > 0
    # 10 | runScript | window.scrollTo(0,41) | 
    self.driver.execute_script("window.scrollTo(0,41)")
    # 11 | open | https://www.emofid.com | 
    self.driver.get("https://www.emofid.com")
    # 12 | verifyElementPresent | css=.web-H2-demibold | 
    elements = self.driver.find_elements(By.CSS_SELECTOR, ".web-H2-demibold")
    assert len(elements) > 0
    # 13 | verifyElementPresent | css=.py-\[3px\] | 
    elements = self.driver.find_elements(By.CSS_SELECTOR, ".py-\\[3px\\]")
    assert len(elements) > 0
    # 14 | click | css=.py-\[3px\] | 
    self.driver.find_element(By.CSS_SELECTOR, ".py-\\[3px\\]").click()
    # 15 | runScript | window.scrollTo(0,2597) | 
    self.driver.execute_script("window.scrollTo(0,2597)")
    # 16 | verifyElementPresent | linkText=ورود به ایزی‌تریدر | 
    elements = self.driver.find_elements(By.LINK_TEXT, "ورود به ایزی‌تریدر")
    assert len(elements) > 0
    # 17 | click | css=.hidden > span > img | 
    self.driver.find_element(By.CSS_SELECTOR, ".hidden > span > img").click()
    # 18 | verifyElementPresent | css=.relative:nth-child(1) > .flex > .text-m-blue-00 | 
    elements = self.driver.find_elements(By.CSS_SELECTOR, ".relative:nth-child(1) > .flex > .text-m-blue-00")
    assert len(elements) > 0
    # 19 | verifyElementPresent | css=.py-6:nth-child(1) > .justify-center | 
    elements = self.driver.find_elements(By.CSS_SELECTOR, ".py-6:nth-child(1) > .justify-center")
    assert len(elements) > 0
    # 20 | click | css=.py-6:nth-child(1) > .justify-center | 
    self.driver.find_element(By.CSS_SELECTOR, ".py-6:nth-child(1) > .justify-center").click()
    # 21 | runScript | window.scrollTo(0,3304) | 
    self.driver.execute_script("window.scrollTo(0,3304)")
    # 22 | verifyElementPresent | css=.absolute:nth-child(3) > .flex | 
    elements = self.driver.find_elements(By.CSS_SELECTOR, ".absolute:nth-child(3) > .flex")
    assert len(elements) > 0
    # 23 | click | css=.h-6 img | 
    self.driver.find_element(By.CSS_SELECTOR, ".h-6 img").click()
    # 24 | mouseOver | css=.h-6 img | 
    element = self.driver.find_element(By.CSS_SELECTOR, ".h-6 img")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    # 25 | mouseOut | css=.hidden > span > img | 
    element = self.driver.find_element(By.CSS_SELECTOR, "body")
    actions = ActionChains(self.driver)
    actions.move_to_element(element, 0, 0).perform()
    # 26 | verifyElementPresent | css=.relative:nth-child(2) > .flex > .text-m-blue-00 | 
    elements = self.driver.find_elements(By.CSS_SELECTOR, ".relative:nth-child(2) > .flex > .text-m-blue-00")
    assert len(elements) > 0
    # 27 | verifyElementPresent | css=.py-6:nth-child(2) > .justify-center | 
    elements = self.driver.find_elements(By.CSS_SELECTOR, ".py-6:nth-child(2) > .justify-center")
    assert len(elements) > 0
    # 28 | click | css=.py-6:nth-child(2) > .justify-center | 
    self.driver.find_element(By.CSS_SELECTOR, ".py-6:nth-child(2) > .justify-center").click()
    # 29 | verifyElementPresent | css=h1 | 
    elements = self.driver.find_elements(By.CSS_SELECTOR, "h1")
    assert len(elements) > 0
  
---------------------------------------------------------------------------------------------------------------------------------
# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class TestVideo():
  def setup_method(self, method):
    self.driver = webdriver.Chrome()
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def test_video(self):
    # Test name: video
    # Step # | name | target | value
    # 1 | open | https://www.emofid.com/ | 
    self.driver.get("https://www.emofid.com/")
    # 2 | setWindowSize | 1936x1056 | 
    self.driver.set_window_size(1936, 1056)
    # 3 | click | linkText=آرشیو رویدادهای آموزشی | 
    self.driver.find_element(By.LINK_TEXT, "آرشیو رویدادهای آموزشی").click()
    # 4 | mouseOver | css=.box-outer:nth-child(2) .attachment-thumbnail | 
    element = self.driver.find_element(By.CSS_SELECTOR, ".box-outer:nth-child(2) .attachment-thumbnail")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    # 5 | mouseOut | css=.box-outer:nth-child(2) .attachment-thumbnail | 
    element = self.driver.find_element(By.CSS_SELECTOR, "body")
    actions = ActionChains(self.driver)
    actions.move_to_element(element, 0, 0).perform()
    # 6 | verifyElementPresent | linkText=کلاس‌ها | 
    elements = self.driver.find_elements(By.LINK_TEXT, "کلاس‌ها")
    assert len(elements) > 0
    # 7 | click | css=.box-outer:nth-child(1) h3 | 
    self.driver.find_element(By.CSS_SELECTOR, ".box-outer:nth-child(1) h3").click()
    # 8 | open | https://www.emofid.com/ | 
    self.driver.get("https://www.emofid.com/")
    # 9 | runScript | window.scrollTo(0,868) | 
    self.driver.execute_script("window.scrollTo(0,868)")
    # 10 | runScript | window.scrollTo(0,3900) | 
    self.driver.execute_script("window.scrollTo(0,3900)")
    # 11 | click | linkText=آرشیو مطالب آموزشی | 
    self.driver.find_element(By.LINK_TEXT, "آرشیو مطالب آموزشی").click()
    # 12 | verifyElementPresent | css=.c-archive-slider | 
    elements = self.driver.find_elements(By.CSS_SELECTOR, ".c-archive-slider")
    assert len(elements) > 0
    # 13 | verifyElementPresent | css=.w-popular > .title | 
    elements = self.driver.find_elements(By.CSS_SELECTOR, ".w-popular > .title")
    assert len(elements) > 0
    # 14 | open | https://www.emofid.com/ | 
    self.driver.get("https://www.emofid.com/")
    # 15 | runScript | window.scrollTo(0,4500) | 
    self.driver.execute_script("window.scrollTo(0,4500)")
    # 16 | click | linkText=لیست کامل دوره‌ها | 
    self.driver.find_element(By.LINK_TEXT, "لیست کامل دوره‌ها").click()
    # 17 | click | linkText=دوره جامع ایچیموکو | 
    self.driver.find_element(By.LINK_TEXT, "دوره جامع ایچیموکو").click()
    # 18 | click | css=.plyr__control--overlaid | 
    self.driver.find_element(By.CSS_SELECTOR, ".plyr__control--overlaid").click()
    # 19 | click | css=.plyr__controls__item:nth-child(1) | 
    self.driver.find_element(By.CSS_SELECTOR, ".plyr__controls__item:nth-child(1)").click()
    # 20 | verifyElementPresent | css=.plyr__poster | 
    elements = self.driver.find_elements(By.CSS_SELECTOR, ".plyr__poster")
    assert len(elements) > 0
    # 21 | verifyElementPresent | css=.c-landing-archive-events h2 | 
    elements = self.driver.find_elements(By.CSS_SELECTOR, ".c-landing-archive-events h2")
    assert len(elements) > 0
  
--------------------------------------------------------------------------------------------------------------------------------
# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class TestOtherstockcode():
  def setup_method(self, method):
    self.driver = webdriver.Chrome()
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def test_otherstockcode(self):
    # Test name: other & stock code
    # Step # | name | target | value
    # 1 | open | https://www.emofid.com/ | 
    self.driver.get("https://www.emofid.com/")
    # 2 | setWindowSize | 1936x1056 | 
    self.driver.set_window_size(1936, 1056)
    # 3 | runScript | window.scrollTo(0,306) | 
    self.driver.execute_script("window.scrollTo(0,306)")
    # 4 | verifyElementPresent | css=.before\3A\!max-w-full | 
    elements = self.driver.find_elements(By.CSS_SELECTOR, ".before\\3A\\!max-w-full")
    assert len(elements) > 0
    # 5 | click | css=.py-\[9px\] | 
    self.driver.find_element(By.CSS_SELECTOR, ".py-\\[9px\\]").click()
    # 6 | runScript | window.scrollTo(0,3692) | 
    self.driver.execute_script("window.scrollTo(0,3692)")
    # 7 | verifyElementPresent | linkText=خرید اشتراک بورس‌ویو | 
    elements = self.driver.find_elements(By.LINK_TEXT, "خرید اشتراک بورس‌ویو")
    assert len(elements) > 0
    # 8 | click | css=.hidden > span > img | 
    self.driver.find_element(By.CSS_SELECTOR, ".hidden > span > img").click()
    # 9 | mouseOver | css=.hidden > span > img | 
    element = self.driver.find_element(By.CSS_SELECTOR, ".hidden > span > img")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    # 10 | mouseOut | css=.hidden > span > img | 
    element = self.driver.find_element(By.CSS_SELECTOR, "body")
    actions = ActionChains(self.driver)
    actions.move_to_element(element, 0, 0).perform()
    # 11 | click | css=.first\3Amr-auto:nth-child(2) | 
    self.driver.find_element(By.CSS_SELECTOR, ".first\\3Amr-auto:nth-child(2)").click()
    # 12 | verifyElementPresent | css=.before\3A\!max-w-full | 
    elements = self.driver.find_elements(By.CSS_SELECTOR, ".before\\3A\\!max-w-full")
    assert len(elements) > 0
    # 13 | click | css=.py-\[9px\] | 
    self.driver.find_element(By.CSS_SELECTOR, ".py-\\[9px\\]").click()
    # 14 | runScript | window.scrollTo(0,4058) | 
    self.driver.execute_script("window.scrollTo(0,4058)")
    # 15 | verifyElementPresent | linkText=ورود به پلکان | 
    elements = self.driver.find_elements(By.LINK_TEXT, "ورود به پلکان")
    assert len(elements) > 0
    # 16 | click | css=.h-6 img | 
    self.driver.find_element(By.CSS_SELECTOR, ".h-6 img").click()
    # 17 | mouseOver | css=.h-6 img | 
    element = self.driver.find_element(By.CSS_SELECTOR, ".h-6 img")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    # 18 | mouseOut | css=.hidden > span > img | 
    element = self.driver.find_element(By.CSS_SELECTOR, "body")
    actions = ActionChains(self.driver)
    actions.move_to_element(element, 0, 0).perform()
    # 19 | verifyElementPresent | css=.hover\3A bg-m-blue-80 | 
    elements = self.driver.find_elements(By.CSS_SELECTOR, ".hover\\3A bg-m-blue-80")
    assert len(elements) > 0
    # 20 | click | css=.hover\3A bg-m-blue-80 | 
    self.driver.find_element(By.CSS_SELECTOR, ".hover\\3A bg-m-blue-80").click()
    # 21 | runScript | window.scrollTo(0,1020) | 
    self.driver.execute_script("window.scrollTo(0,1020)")
    # 22 | click | id=mobile | 
    self.driver.find_element(By.ID, "mobile").click()
    # 23 | verifyElementPresent | css=.text-white:nth-child(3) | 
    elements = self.driver.find_elements(By.CSS_SELECTOR, ".text-white:nth-child(3)")
    assert len(elements) > 0
    # 24 | click | css=.hidden > span > img | 
    self.driver.find_element(By.CSS_SELECTOR, ".hidden > span > img").click()
    # 25 | mouseOver | css=.hidden > span > img | 
    element = self.driver.find_element(By.CSS_SELECTOR, ".hidden > span > img")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    # 26 | mouseOut | css=.hidden > span > img | 
    element = self.driver.find_element(By.CSS_SELECTOR, "body")
    actions = ActionChains(self.driver)
    actions.move_to_element(element, 0, 0).perform()
    # 27 | click | css=.w-auto | 
    self.driver.find_element(By.CSS_SELECTOR, ".w-auto").click()
    # 28 | verifyElementPresent | css=.title | 
    elements = self.driver.find_elements(By.CSS_SELECTOR, ".title")
    assert len(elements) > 0
    # 29 | open | https://www.emofid.com/ | 
    self.driver.get("https://www.emofid.com/")
    # 30 | runScript | window.scrollTo(0,6100) | 
    self.driver.execute_script("window.scrollTo(0,6100)")
    # 31 | runScript | window.scrollTo(0,6358) | 
    self.driver.execute_script("window.scrollTo(0,6358)")
    # 32 | verifyElementPresent | css=.py-\[11px\] | 
    elements = self.driver.find_elements(By.CSS_SELECTOR, ".py-\\[11px\\]")
    assert len(elements) > 0
    # 33 | click | css=.py-\[11px\] | 
    self.driver.find_element(By.CSS_SELECTOR, ".py-\\[11px\\]").click()
  
-------------------------------------------------------------------------------------------------------------
# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class TestFooternewsletter():
  def setup_method(self, method):
    self.driver = webdriver.Chrome()
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def test_footernewsletter(self):
    # Test name: footer & news letter
    # Step # | name | target | value
    # 1 | open | https://www.emofid.com/ | 
    self.driver.get("https://www.emofid.com/")
    # 2 | setWindowSize | 1936x1056 | 
    self.driver.set_window_size(1936, 1056)
    # 3 | runScript | window.scrollTo(0,6146) | 
    self.driver.execute_script("window.scrollTo(0,6146)")
    # 4 | runScript | window.scrollTo(0,6523) | 
    self.driver.execute_script("window.scrollTo(0,6523)")
    # 5 | verifyElementPresent | css=.font-normal | 
    elements = self.driver.find_elements(By.CSS_SELECTOR, ".font-normal")
    assert len(elements) > 0
    # 6 | click | id=news-subscribe | 
    self.driver.find_element(By.ID, "news-subscribe").click()
    # 7 | type | id=news-subscribe | test@test.com
    self.driver.find_element(By.ID, "news-subscribe").send_keys("test@test.com")
    # 8 | click | css=.font-normal | 
    self.driver.find_element(By.CSS_SELECTOR, ".font-normal").click()
    # 9 | mouseOver | css=.font-normal | 
    element = self.driver.find_element(By.CSS_SELECTOR, ".font-normal")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    # 10 | mouseOut | css=.\!text-transparent | 
    element = self.driver.find_element(By.CSS_SELECTOR, "body")
    actions = ActionChains(self.driver)
    actions.move_to_element(element, 0, 0).perform()
    # 11 | click | css=.font-normal | 
    self.driver.find_element(By.CSS_SELECTOR, ".font-normal").click()
    # 12 | click | css=.sm\3Ah-\[134px\] | 
    self.driver.find_element(By.CSS_SELECTOR, ".sm\\3Ah-\\[134px\\]").click()
    # 13 | type | id=news-subscribe | testttt@gmail.com
    self.driver.find_element(By.ID, "news-subscribe").send_keys("testttt@gmail.com")
    # 14 | click | css=.font-normal | 
    self.driver.find_element(By.CSS_SELECTOR, ".font-normal").click()
    # 15 | mouseOver | css=.font-normal | 
    element = self.driver.find_element(By.CSS_SELECTOR, ".font-normal")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    # 16 | mouseOut | css=.\!text-transparent | 
    element = self.driver.find_element(By.CSS_SELECTOR, "body")
    actions = ActionChains(self.driver)
    actions.move_to_element(element, 0, 0).perform()
    # 17 | assertElementNotPresent | css=.font-normal | 30000
    elements = self.driver.find_elements(By.CSS_SELECTOR, ".font-normal")
    assert len(elements) == 0
    # 18 | selectFrame | index=0 | 
    self.driver.switch_to.frame(0)
    # 19 | click | css=.button__rX4Lprt9JGluPd\+43d4Ezg\=\= | 
    self.driver.find_element(By.CSS_SELECTOR, ".button__rX4Lprt9JGluPd\\+43d4Ezg\\=\\=").click()
    # 20 | verifyElementPresent | css=.mt-\[32px\] | 
    elements = self.driver.find_elements(By.CSS_SELECTOR, ".mt-\\[32px\\]")
    assert len(elements) > 0
    # 21 | verifyElementPresent | css=.composer__Hnt\+d6kOz7\+\+gPSDqZGEhw\=\= | 
    elements = self.driver.find_elements(By.CSS_SELECTOR, ".composer__Hnt\\+d6kOz7\\+\\+gPSDqZGEhw\\=\\=")
    assert len(elements) > 0
  
---------------------------------------------------------------------------------------------------------------------
# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class TestFunds():
  def setup_method(self, method):
    self.driver = webdriver.Chrome()
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def test_funds(self):
    # Test name: funds
    # Step # | name | target | value
    # 1 | open | https://www.emofid.com/funds/ | 
    self.driver.get("https://www.emofid.com/funds/")
    # 2 | setWindowSize | 1936x1056 | 
    self.driver.set_window_size(1936, 1056)
    # 3 | click | linkText=مشاوره رایگان سرمایه‌گذاری | 
    self.driver.find_element(By.LINK_TEXT, "مشاوره رایگان سرمایه‌گذاری").click()
    # 4 | verifyElementPresent | id=mobile | 
    elements = self.driver.find_elements(By.ID, "mobile")
    assert len(elements) > 0
    # 5 | verifyElementPresent | css=.text-white:nth-child(3) | 
    elements = self.driver.find_elements(By.CSS_SELECTOR, ".text-white:nth-child(3)")
    assert len(elements) > 0
    # 6 | open | https://www.emofid.com/funds | 
    self.driver.get("https://www.emofid.com/funds")
    # 7 | runScript | window.scrollTo(0,110) | 
    self.driver.execute_script("window.scrollTo(0,110)")
    # 8 | verifyElementPresent | css=.\!text-m-blue-50 | 
    elements = self.driver.find_elements(By.CSS_SELECTOR, ".\\!text-m-blue-50")
    assert len(elements) > 0
    # 9 | verifyElementPresent | css=.first\3Amr-auto:nth-child(2) | 
    elements = self.driver.find_elements(By.CSS_SELECTOR, ".first\\3Amr-auto:nth-child(2)")
    assert len(elements) > 0
    # 10 | verifyElementPresent | css=.whitespace-nowrap:nth-child(3) | 
    elements = self.driver.find_elements(By.CSS_SELECTOR, ".whitespace-nowrap:nth-child(3)")
    assert len(elements) > 0
    # 11 | verifyElementPresent | css=.whitespace-nowrap:nth-child(5) | 
    elements = self.driver.find_elements(By.CSS_SELECTOR, ".whitespace-nowrap:nth-child(5)")
    assert len(elements) > 0
    # 12 | verifyElementPresent | css=.whitespace-nowrap:nth-child(6) | 
    elements = self.driver.find_elements(By.CSS_SELECTOR, ".whitespace-nowrap:nth-child(6)")
    assert len(elements) > 0
    # 13 | verifyElementPresent | css=.whitespace-nowrap:nth-child(7) | 
    elements = self.driver.find_elements(By.CSS_SELECTOR, ".whitespace-nowrap:nth-child(7)")
    assert len(elements) > 0
    # 14 | verifyElementPresent | css=.whitespace-nowrap:nth-child(8) | 
    elements = self.driver.find_elements(By.CSS_SELECTOR, ".whitespace-nowrap:nth-child(8)")
    assert len(elements) > 0
    # 15 | runScript | window.scrollTo(0,1774) | 
    self.driver.execute_script("window.scrollTo(0,1774)")
    # 16 | click | linkText=مشاهده صندوق | 
    self.driver.find_element(By.LINK_TEXT, "مشاهده صندوق").click()
    # 17 | runScript | window.scrollTo(0,892) | 
    self.driver.execute_script("window.scrollTo(0,892)")
    # 18 | click | css=.bg-white:nth-child(1) | 
    self.driver.find_element(By.CSS_SELECTOR, ".bg-white:nth-child(1)").click()
    # 19 | click | css=.hover\3A bg-m-neutral-00:nth-child(2) | 
    self.driver.find_element(By.CSS_SELECTOR, ".hover\\3A bg-m-neutral-00:nth-child(2)").click()
    # 20 | verifyElementPresent | css=.font-semibold > span | 
    elements = self.driver.find_elements(By.CSS_SELECTOR, ".font-semibold > span")
    assert len(elements) > 0
    # 21 | verifyElementPresent | css=.border-m-blue-50 | 
    elements = self.driver.find_elements(By.CSS_SELECTOR, ".border-m-blue-50")
    assert len(elements) > 0
    # 22 | verifyElementPresent | css=.border-b-3:nth-child(2) | 
    elements = self.driver.find_elements(By.CSS_SELECTOR, ".border-b-3:nth-child(2)")
    assert len(elements) > 0
    # 23 | verifyElementPresent | css=.border-b-3:nth-child(3) | 
    elements = self.driver.find_elements(By.CSS_SELECTOR, ".border-b-3:nth-child(3)")
    assert len(elements) > 0
    # 24 | verifyElementPresent | css=.font-medium:nth-child(5) | 
    elements = self.driver.find_elements(By.CSS_SELECTOR, ".font-medium:nth-child(5)")
    assert len(elements) > 0
    # 25 | verifyElementPresent | css=.font-medium:nth-child(6) | 
    elements = self.driver.find_elements(By.CSS_SELECTOR, ".font-medium:nth-child(6)")
    assert len(elements) > 0
    # 26 | click | linkText=دریافت مشاوره رایگان | 
    self.driver.find_element(By.LINK_TEXT, "دریافت مشاوره رایگان").click()
    # 27 | verifyElementPresent | css=.text-\[32px\] | 
    elements = self.driver.find_elements(By.CSS_SELECTOR, ".text-\\[32px\\]")
    assert len(elements) > 0
    # 28 | verifyElementPresent | css=.text-white:nth-child(3) | 
    elements = self.driver.find_elements(By.CSS_SELECTOR, ".text-white:nth-child(3)")
    assert len(elements) > 0
    # 29 | verifyElementPresent | id=mobile | 
    elements = self.driver.find_elements(By.ID, "mobile")
    assert len(elements) > 0
  
-------------------------------------------------------------------------------------------------------------
# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

class TestContact():
  def setup_method(self, method):
    self.driver = webdriver.Chrome()
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def test_contact(self):
    # Test name: contact
    # Step # | name | target | value
    # 1 | open | / | 
    self.driver.get("https://www.emofid.com/")
    # 2 | setWindowSize | 1936x1056 | 
    self.driver.set_window_size(1936, 1056)
    # 3 | runScript | window.scrollTo(0,315) | 
    self.driver.execute_script("window.scrollTo(0,315)")
    # 4 | runScript | window.scrollTo(0,6235) | 
    self.driver.execute_script("window.scrollTo(0,6235)")
    # 5 | runScript | window.scrollTo(0,6538) | 
    self.driver.execute_script("window.scrollTo(0,6538)")
    # 6 | click | linkText=تماس با ما | 
    self.driver.find_element(By.LINK_TEXT, "تماس با ما").click()
    # 7 | runScript | window.scrollTo(0,3281) | 
    self.driver.execute_script("window.scrollTo(0,3281)")
    # 8 | verifyElementPresent | linkText=8700@emofid.com | 
    elements = self.driver.find_elements(By.LINK_TEXT, "8700@emofid.com")
    assert len(elements) > 0
    # 9 | verifyElementPresent | linkText=تماس با 8700-021 | 
    elements = self.driver.find_elements(By.LINK_TEXT, "تماس با 8700-021")
    assert len(elements) > 0
    # 10 | verifyElementPresent | linkText=پیام به پشتیبان آنلاین | 
    elements = self.driver.find_elements(By.LINK_TEXT, "پیام به پشتیبان آنلاین")
    assert len(elements) > 0
    # 11 | click | css=.w-full:nth-child(3) .flex:nth-child(3) > span | 
    self.driver.find_element(By.CSS_SELECTOR, ".w-full:nth-child(3) .flex:nth-child(3) > span").click()
    # 12 | click | linkText=پرسش های متداول | 
    self.driver.find_element(By.LINK_TEXT, "پرسش های متداول").click()
    # 13 | verifyElementPresent | css=.inner > .title | 
    elements = self.driver.find_elements(By.CSS_SELECTOR, ".inner > .title")
    assert len(elements) > 0
    # 14 | verifyElementPresent | id=question-search | 
    elements = self.driver.find_elements(By.ID, "question-search")
    assert len(elements) > 0
    # 15 | open | https://www.emofid.com | 
    self.driver.get("https://www.emofid.com")
    # 16 | runScript | window.scrollTo(0,15) | 
    self.driver.execute_script("window.scrollTo(0,15)")
    # 17 | runScript | window.scrollTo(0,351) | 
    self.driver.execute_script("window.scrollTo(0,351)")
    # 18 | runScript | window.scrollTo(0,6269) | 
    self.driver.execute_script("window.scrollTo(0,6269)")
    # 19 | click | linkText=تماس با ما | 
    self.driver.find_element(By.LINK_TEXT, "تماس با ما").click()
    # 20 | click | linkText=پیشنهادات و شکایات | 
    self.driver.find_element(By.LINK_TEXT, "پیشنهادات و شکایات").click()
    # 21 | verifyElementPresent | css=.text-\[32px\] | 
    elements = self.driver.find_elements(By.CSS_SELECTOR, ".text-\\[32px\\]")
    assert len(elements) > 0
    # 22 | verifyElementPresent | name=content | 
    elements = self.driver.find_elements(By.NAME, "content")
    assert len(elements) > 0
    # 23 | verifyElementPresent | css=.h-12 | 
    elements = self.driver.find_elements(By.CSS_SELECTOR, ".h-12")
    assert len(elements) > 0
  
-----------------------------------------------------------------------------------------------------------------------


  
